Creating custom networks in docker host
[xxx@dockermaster ~]$ docker network create --driver=bridge --subnet=192.168.0.0/16 --gateway=192.168.0.1  custom1

[xxxx@dockermaster ~]$ docker network create --driver=bridge --subnet=172.100.0.0/16 --gateway=172.100.0.1 custom2

[xxxx@dockermaster ~]$ docker network ls
NETWORK ID     NAME          DRIVER    SCOPE
6a245e8d2bde   bridge        bridge    local
550e5ac2a55b   custom1       bridge    local
0eb2dba2b13f   custom2       bridge    local
75630f6b8b4d   host          host      local
733894797c90   new_bridge1   bridge    local
74a0546407a3   new_bridge2   bridge    local
88ddbe1e876f   none          null      local

[xxxx@dockermaster ~]$ docker run -itd --network=custom1 --rm --name=tomcat1 -p 1000:8080 tomcat

$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS                                       NAMES
5fb68706fb55   tomcat    "catalina.sh run"        15 seconds ago   Up 13 seconds   0.0.0.0:1000->8080/tcp, :::1000->8080/tcp   tomcat1
$ docker inspect tomcat1

command to copy web files to tomcat local inside the container. The access tomcat on port 1000
Connect to contianer
docker exec -it tomcat1 /bin/bash
cp -r webapps.dist/* webapps/

Adding cutom metwork and connecting networ to a container
docker network connect custom2 tomcat1
docker inspect tomcat1 | more
docker exec -it tomcat1 bash
ip add show

Create tomcat container(not in running state)
$ docker create -it --rm --name tomcat2 --network=custom1 -p 3000:8080 tomcat
$docker ps
$ docker ps -a
Attach second custom network to second tomcat container and start
 $ docker network connect custom2 tomcat2
$ docker start tomcat2
docker exec -it tomcat2 bash
ip add show

Docker images
Gives list of images creates before a particular imageid
[user@dockermaster ~]$ docker image ls --filter "before=02c7f2054405"
$ docker image ls --filter "since=02c7f2054405"
$ docker images --format "{{.ID}}:{{.Repository}}"

TO remove images by id, tag
docker image rm <id> <tag> <imagename>
dangling images are images created with same name. Older images become dangling images
To remove danglin images
docker image prune

Creating images from running container
download latest ubuntu and run the container
docker run -itd --rm --name=testubuntu jijukrishnan/ubuntu:1.0
docker ps
do an exec to container
docker exec -it  <containerid> bash
With in the container bash
run apt-get -yqq update
install apache
apt-get -y install apache2
exit the container
Run docker container commit testubuntu jijukrishnan/apache:2.0
For message and author info in image
Run docker container commit --message "new image" --author "jijukrishnan" testubuntu jijukrishnan/apache:3.0
docker image inspect jijukrishnan/apache:3.0 | grep comment

===============================================================================================================================
Dockerfile instructions
.dockerignorefile - present in rootdir and it contains the files that can be ignored by the build context. 
This helps in preventing sending of unnecessary files to dockerdaemon by CLI
Sample format
*
README*
docker-compose.yaml
*.yaml
instructions in docker file
FROM - specify a build image using this comand. image is created layer bylayer
ARG -This can be before FROM, provides arguments to docker CLI
RUN - Execute commands in a new layer and commits chnages
RUN can be in two forms
Shell form :RUN <command> 
Exec form: RUN["executable","param1',"param2"]
CMD- sets the defaults for container. Set the command to be executed in command when it starts
============================================================================================================
Docker storage layers
To get accurate infor of storage for containers
docker ps -s --format 'table{{.Names}}\t{{.Image}}\t{{.Size}}'
Total size in verbose which docker uses for all containers
docker system df -v

Default storage driver in docker is overlay2. Storage driver can be changed.
Steps to change the storage driver are
Export Data
Stop Docker
Edit(or create new ) /etc/docker/daemon.json
Start docker
Check docker info
Import data

docker info| grep "Storage Driver"

Create and manage volume(persistent storage for containers)
docker volume create testvolume
docker run -itd --volume=testvolume:/app jijukrishnan/nginx:1.0
docker exec -it <containerid> bash
switch to app dir and do a ls

docker volume inspect testvolume

To remove volume
docker volume rm testvolume
docker run -itd --rm --name=nginx_test1 --mount source=test_volume2,target=/app --mount source=test_volume1,target=/app2 jijukrishnan/nginx:1.0
